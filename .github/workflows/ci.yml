name: CI

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  COMPOSE_FILE: docker-compose.yml:docker-compose.override.github.yml
  GAR_LOCATION: europe-west1
  REPOSITORY: repo-1
  IMAGE: dev

on:
  push:
    branches:
      - master

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - uses: actions/cache@v2
        with:
          path: api/composer
          key: ${{ runner.os }}-composer-${{ hashFiles('api/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - uses: actions/cache@v2
        with:
          path: client/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('client/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Start services
        run: docker-compose up --build -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: API health check
        run: curl -v -o /dev/null http://localhost:8080/health
      - name: Client health check
        run: curl -v -o /dev/null http://localhost
      - name: Create test database
        run: |
          docker-compose exec -T php bin/console -e test doctrine:database:create
          docker-compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      - name: PHPUnit
        run: docker-compose exec -T php bin/phpunit
      - name: Doctrine Schema Validator
        run: docker-compose exec -T php bin/console doctrine:schema:validate --skip-sync

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - id: 'auth'
        name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Docker configuration
        run: |-
          echo ${{ steps.auth.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Build
        run: |-
          docker compose build php api client

      - name: Publish
        run: |-
          docker compose push php api client
          docker tag ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA} ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:api-latest  
          docker push ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:api-latest
          docker tag ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA} ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:api-latest
          docker push ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:api-latest
          docker tag ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA} ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:api-latest
          docker push ${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:api-latest
